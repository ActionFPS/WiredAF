- name: Set up af user
  user:
    name: af_server

- name: Set up multiple authorized keys
  authorized_key:
    user: af_server
    state: present
    key: '{{ item }}'
  with_file:
    - users_deploy

- name: checkout repo
  git:
    repo: https://github.com/ActionFPS/ActionFPS-Game.git
    version: master
    dest: /home/af_server/game
  become: yes
  become_user: af_server
  register: git_checkout

- name: Install build dependencies
  apt:
    state: installed
    name: "{{ item }}"
  with_items:
    - clang
    - make
    - automake
    - libcurl4-openssl-dev
    - openssl
    - libssl-dev
  register: build_deps
  when: ansible_os_family == 'Debian'

- name: Install build dependencies (RedHat).
  package:
    name: "{{ item }}"
    state: installed
  with_items:
    - openssl-devel
    - automake
    - clang
    - "@Development tools"
  when: (ansible_os_family == 'RedHat')

- stat: path=/home/af_server/game/config/users
  register: users

- name: ensure users and group file exists
  when: users.stat.exists == False
  become: yes
  become_user: af_server
  file:
    path: "/home/af_server/game/config/{{ item }}"
    state: touch
    mode: 0755
  with_items:
    - users
    - groups

- name: compile the server
  when: build_deps.changed or git_checkout.changed
  become: yes
  become_user: af_server
  shell: make server
  args:
    chdir: /home/af_server/game/source/src/
  register: new_artifact

- name: "copy systemd service template configuration for {{ app_port }}"
  template: >
    src=af-server.service.j2
    dest=/etc/systemd/system/af-server_{{ app_port }}.service
    mode=0755
  register: af_server_unit

- name: reload systemd daemon
  systemd:
    name: "af-server_{{ app_port }}"
    daemon_reload: yes
  when: af_server_unit.changed

- name: restart and enable the service
  systemd:
    name: "af-server_{{ app_port }}"
    state: restarted
    enabled: yes
  when: af_server_unit.changed or (new_artifact is defined and new_artifact.changed)

